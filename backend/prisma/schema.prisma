// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  userName String @unique
  firstName String
  middleName String?
  lastName String?
  password String
  profilePhoto String?
  blogs Blog[] //one user can have multiple blog
  savedBlogs SavedBlog[] //one user have multiple saved blog
  likes Like[] //one user can like multiple blog
}

model Blog{
  id Int @id @default(autoincrement())
  title String
  content String
  coverImage String?
  isPublished Boolean @default(false)

  authorId  Int
//reference to the User table for autor
  author    User    @relation(fields: [authorId], references: [id],onDelete: Cascade)  

  likes Like[] //one blog have multile likes

  savedBy SavedBlog[] //one blog can saved by multiple user
  
}

model Like{

  id Int @id @default(autoincrement())
  
  userId Int
  blogId Int

  //reference to the user section
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  //reference to the Blog section
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId,blogId])

}

model SavedBlog{
  id Int @id @default(autoincrement())
  userId Int
  blogId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //reference to the user

  blog Blog @relation(fields: [blogId],references: [id], onDelete: Cascade) //referece to the blog

  @@unique([userId, blogId]) //one user can save one blog

}
